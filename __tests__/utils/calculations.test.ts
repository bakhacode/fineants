import {
  calculateLossRate,
  calculateRate,
  calculateValue,
} from "@utils/calculations";

describe("주가 관련 함수 테스트", () => {
  describe("주가의 변동률 계산 함수 테스트", () => {
    describe("calculateRate 함수", () => {
      it("첫 번째 인자가 두 번째 인자보다 클 때 증가율을 계산한다", () => {
        // 첫 번째 인자가 두 번째 인자보다 크면, 증가율을 나타낸다.
        // 예: 200은 100에 비해 100% 증가했다.
        expect(calculateRate(200, 100)).toBe(100);
      });

      it("첫 번째 인자가 두 번째 인자보다 작을 때 감소율을 계산한다", () => {
        // 첫 번째 인자가 두 번째 인자보다 작으면, 감소율을 나타낸다.
        // 예: 100은 200에 비해 50% 감소했다.
        expect(calculateRate(100, 200)).toBe(-50);
      });
    });
  });

  describe("손실률 계산 함수 테스트", () => {
    describe("calculateLossRate 함수", () => {
      it("첫 번째 인자가 두 번째 인자보다 클 때 손실률을 계산한다", () => {
        // 첫 번째 인자가 두 번째 인자보다 크면, 손실률을 나타낸다.
        // 예: 200에서 100으로 감소했을 때, 손실률은 50%이다.
        expect(calculateLossRate(200, 100)).toBe("50");
      });

      it("첫 번째 인자가 두 번째 인자보다 작을 때 손실률을 계산한다", () => {
        // 첫 번째 인자가 두 번째 인자보다 작으면, 손실률을 나타낸다.
        // 예: 100에서 200으로 증가했을 때, 손실률은 -100%이다.
        expect(calculateLossRate(100, 200)).toBe("-100");
      });

      it("첫 번째 인자와 두 번째 인자가 같을 때 손실률을 계산한다", () => {
        // 첫 번째 인자와 두 번째 인자가 같으면, 손실률은 0%이다.
        // 예: 100에서 100으로 변화가 없을 때, 손실률은 0%이다.
        expect(calculateLossRate(100, 100)).toBe("0");
      });
    });
  });

  describe("값 계산 함수 테스트", () => {
    describe("calculateValue 함수", () => {
      it("양수 비율을 적용하여 값을 계산한다", () => {
        // 양수 비율을 적용하면, 기준값이 증가한다.
        // 예: 기준값 100에 50% 증가 비율을 적용하면, 결과값은 150이 된다.
        expect(calculateValue(50, 100)).toBe("150");
      });

      it("음수 비율을 적용하여 값을 계산한다", () => {
        // 음수 비율을 적용하면, 기준값이 감소한다.
        // 예: 기준값 100에 -50% 감소 비율을 적용하면, 결과값은 50이 된다.
        expect(calculateValue(-50, 100)).toBe("50");
      });

      it("비율이 0일 때 값을 계산한다", () => {
        // 비율이 0이면, 기준값에 변화가 없다.
        // 예: 기준값 100에 0% 비율을 적용하면, 결과값은 여전히 100이다.
        expect(calculateValue(0, 100)).toBe("100");
      });
    });
  });
});
